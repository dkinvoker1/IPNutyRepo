@*@model IPNuty.ViewModels.Singers.SheetMusicListAcctualizationViewModel*@
@model    IEnumerable<IPNuty.Models.SheetMusic>
@{
    ViewBag.Title = "Baza nut chóru";
}
<h2>Twoje posiadane nuty</h2>
<div>
    <table>
        <tr>
            <td>Autor</td>
            <td>Tytuł</td>
            <td>Rodzaj</td>
            <td>Czy posiadane</td>
            <td>Akcja</td>
        </tr>
        @{ var sing = Model.Where(e => e.SingerID != null && e.SingerID.Name + e.SingerID.LastName == User.Identity.Name).ToList();}
        @foreach (var item in Model.Where(e=>e.SingerID==null))
         {
            <tr>
                <td>@item.Author</td>
                <td>@item.Title</td>
                <td>@item.Type</td>


                @*@if (item.SingerID != null && item.SingerID.Name + item.SingerID.LastName == User.Identity.Name)*@
                @{ var cos = sing.Where(e => e.Author == item.Author && e.Title == item.Title && e.Type == item.Type).ToList();}
                @if (cos.Count>0)
                {
                    <td>Tak</td>
                    <td>Usuń nuty/Zamów nuty/@Html.ActionLink("Nie posiadane", "SubtractSheetMusicFromSinger", item)</td>
                }
                else
                {
                    <td>Nie</td>
                    <td>Usuń nuty/@Html.ActionLink("Zamów nuty", "OrderSheetMusic", item)/@Html.ActionLink("Posiadane", "AddNewSheetMusicToSinger", item)</td>
                }
                
            </tr>
         }
    </table>
    <h2>Jeśli nuty są posiadane to można je usunąć z listy, jeśli są nie w posiadaniu to można je zamówić - wtedy trafiają na listę zamówień</h2>
</div>

